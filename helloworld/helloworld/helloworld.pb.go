// Code generated by protoc-gen-go.
// source: helloworld.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	EchoMessage
	HelloRequest1
	HelloReply
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
//import _ "google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMessage struct {
	Value string                      `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Time  *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
}

func (m *EchoMessage) Reset()                    { *m = EchoMessage{} }
func (m *EchoMessage) String() string            { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()               {}
func (*EchoMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoMessage) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

// The request message containing the user's name.
type HelloRequest1 struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	WaitMinutes int32  `protobuf:"varint,2,opt,name=wait_minutes,json=waitMinutes" json:"wait_minutes,omitempty"`
}

func (m *HelloRequest1) Reset()                    { *m = HelloRequest1{} }
func (m *HelloRequest1) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest1) ProtoMessage()               {}
func (*HelloRequest1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*EchoMessage)(nil), "helloworld.EchoMessage")
	proto.RegisterType((*HelloRequest1)(nil), "helloworld.HelloRequest1")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_SayHelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/helloworld.Greeter/SayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterSayHelloClient{stream}
	return x, nil
}

type Greeter_SayHelloClient interface {
	Send(*HelloRequest1) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterSayHelloClient) Send(m *HelloRequest1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(Greeter_SayHelloServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).SayHello(&greeterSayHelloServer{stream})
}

type Greeter_SayHelloServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest1, error)
	grpc.ServerStream
}

type greeterSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterSayHelloServer) Recv() (*HelloRequest1, error) {
	m := new(HelloRequest1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _Greeter_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for EchoService service

type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := grpc.Invoke(ctx, "/helloworld.EchoService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EchoService service

type EchoServiceServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x4d, 0x69, 0x6d, 0x9d, 0x5a, 0x94, 0x55, 0xb4, 0x46, 0xc1, 0x9a, 0x83, 0x14, 0x0f,
	0x9b, 0xb6, 0xde, 0x3c, 0x56, 0xfc, 0x73, 0xa9, 0x94, 0x54, 0xf0, 0x22, 0xc8, 0x36, 0x8e, 0x69,
	0x60, 0x93, 0x8d, 0xd9, 0x4d, 0x6b, 0xaf, 0xbe, 0x82, 0x8f, 0xe6, 0x2b, 0xf8, 0x20, 0x92, 0xdd,
	0x06, 0x23, 0xe8, 0x6d, 0xbe, 0x99, 0xf9, 0x7e, 0x7c, 0x7c, 0xb0, 0x3d, 0x43, 0xce, 0xc5, 0x42,
	0xa4, 0xfc, 0x99, 0x26, 0xa9, 0x50, 0x82, 0xc0, 0xcf, 0xc6, 0x3e, 0x0a, 0x84, 0x08, 0x38, 0xba,
	0x2c, 0x09, 0x5d, 0x16, 0xc7, 0x42, 0x31, 0x15, 0x8a, 0x58, 0x9a, 0x4f, 0xfb, 0x78, 0x75, 0xd5,
	0x6a, 0x9a, 0xbd, 0xb8, 0x2a, 0x8c, 0x50, 0x2a, 0x16, 0x25, 0xe6, 0xc1, 0x99, 0x40, 0xf3, 0xca,
	0x9f, 0x89, 0x11, 0x4a, 0xc9, 0x02, 0x24, 0xbb, 0x50, 0x9b, 0x33, 0x9e, 0x61, 0xdb, 0xea, 0x58,
	0xdd, 0x0d, 0xcf, 0x08, 0x42, 0xa1, 0x9a, 0xfb, 0xda, 0x95, 0x8e, 0xd5, 0x6d, 0x0e, 0x6c, 0x6a,
	0xa0, 0xb4, 0x80, 0xd2, 0xfb, 0x02, 0xea, 0xe9, 0x3f, 0xe7, 0x1a, 0x5a, 0xb7, 0x79, 0x42, 0x0f,
	0x5f, 0x33, 0x94, 0xaa, 0x4f, 0x08, 0x54, 0x63, 0x16, 0x15, 0x54, 0x3d, 0x93, 0x13, 0xd8, 0x5c,
	0xb0, 0x50, 0x3d, 0x45, 0x61, 0x9c, 0x29, 0x94, 0x1a, 0x5e, 0xf3, 0x9a, 0xf9, 0x6e, 0x64, 0x56,
	0xce, 0x29, 0xc0, 0x8a, 0x93, 0xf0, 0x25, 0x69, 0x43, 0x3d, 0x32, 0x31, 0x57, 0x9c, 0x42, 0x0e,
	0xee, 0xa0, 0x7e, 0x93, 0x22, 0x2a, 0x4c, 0xc9, 0x25, 0x34, 0x26, 0x6c, 0xa9, 0x5d, 0xe4, 0x80,
	0x96, 0x9a, 0xfb, 0x15, 0xc8, 0xde, 0xfb, 0xe3, 0x94, 0xf0, 0xa5, 0xb3, 0xd6, 0xb5, 0x7a, 0xd6,
	0xe0, 0xd1, 0x94, 0x32, 0xc1, 0x74, 0x1e, 0xfa, 0x48, 0x46, 0x50, 0xcd, 0x25, 0xd9, 0x2f, 0x9b,
	0x4a, 0xad, 0xd9, 0xff, 0x1d, 0x9c, 0x9d, 0xf7, 0xcf, 0xaf, 0x8f, 0x4a, 0xcb, 0x69, 0xb8, 0xf3,
	0xbe, 0x8b, 0xfe, 0x4c, 0x5c, 0x58, 0x67, 0xc3, 0x1e, 0x1c, 0x86, 0x82, 0x06, 0x69, 0xe2, 0x53,
	0x7c, 0x63, 0x51, 0xc2, 0x51, 0x96, 0xfc, 0xc3, 0x2d, 0x1d, 0xe7, 0x21, 0x9f, 0xc7, 0x79, 0xc1,
	0x63, 0x6b, 0xba, 0xae, 0x9b, 0x3e, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x72, 0x53, 0x7a,
	0x0a, 0x02, 0x00, 0x00,
}
